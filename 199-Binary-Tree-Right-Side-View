  """My solution, but very slow.

The idea is to recursively call this function
to get the view of the left sub-tree and right
sub-tree and compare their views.
"""

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def rightSideView(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
        view = list()
        if root is not None:
            view.append(root.val)
            right_v = self.rightSideView(root.right)
            left_v = self.rightSideView(root.left)
            view.extend(right_v)
            view.extend(left_v[len(right_v):])
        return view
        
